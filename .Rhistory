}
N_func = function(param_rlk) {
out = sum((1:x_max)^(-param_rlk[2]) * exp(-param_rlk[1] * (1:x_max)))
return(out)
}
C_func = function(param_rlk) {
out = sum(vec[vec <= x_max]^-param_rlk[2])
return(out)
}
L_func = function(param_rlk) {
out = A_func(param_rlk) - length(vec[vec <= x_max]) * log(N_func(param_rlk)) + C_func(param_rlk)
print(paste("üîé Testing lambda:", param_rlk[2], "Loss:", -out))
return(-out)
}
### üìå 6. Ciclo su x_max
while (x_max <= end_x_max) {
print('üîÑ Iterazione per x_max =', x_max)
x_max = start_x_max + (n_iter * counter)
counter = counter + 1
vec_x_max[counter] = x_max
n = sum(vec <= x_max)
# Impostazione parametri iniziali
lower = c(Rmin, lammin)
upper = c(Rmax, lammax)
parametri = c(0.01, 1)  # Cambiato da (0.01,5) per non partire troppo vicino al bordo
# üîç Debug: ottimizzazione con GenSA
estimated_parameters = GenSA(parametri, L_func, lower = lower, upper = upper, control = list(verbose = TRUE, maxit = 100))$par
vec_estimated_r[counter] = estimated_parameters[1]
vec_estimated_l[counter] = estimated_parameters[2]
print(paste("‚úÖ Fit completato per x_max =", x_max))
print(paste("üîπ r stimato:", estimated_parameters[1], "üîπ lambda stimato:", estimated_parameters[2]))
### üìå 7. Misura della distanza quadratica media
exp_densities_threshold = histo_data$mids[!histo_data$mids >= x_max]
exp_densities = (exp_densities_threshold^(-vec_estimated_l[counter])) * exp(-(vec_estimated_r[counter] * exp_densities_threshold))
obs_densities = (histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)
length(obs_densities) = length(exp_densities_threshold)
norm_const = sum(exp_densities)/sum(obs_densities)
vec_norm_const[counter] = norm_const
exp_densities = exp_densities / norm_const
distances = (log(exp_densities) - log(obs_densities))^2
mean_quadratic_distance = sum(distances) / length(exp_densities_threshold)
vec_mqd[counter] = mean_quadratic_distance
}
x_max
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), log = "xy", xlab = "log(abundance)", ylab = "log(density)", main = c(station))
if (is.finite(final_x_max) & is.finite(final_l)){
curve((x^(-final_l)) * exp((-final_r * x)) / final_norm_const, from = abund_min, to = final_x_max, add = TRUE)
abline(v = final_x_max, col = 4)
legend("topright", legend = c(paste("Œª:", final_l), paste("x_max:", final_x_max)), bty = "o")
}
source("~/.active-rstudio-document")
source("~/GitHub/PopulationData/newcodejustlam.R")
lambda_range = seq(lammin, lammax, length.out = 100)
log_likelihood_values = sapply(lambda_range, function(l) L_func(c(0.01, l)))
plot(lambda_range, log_likelihood_values, type = "l", main = "Log-Likelihood vs Lambda",
xlab = "Lambda", ylab = "Negative Log-Likelih
dev.off()
lambda_range = seq(lammin, lammax, length.out = 100)
log_likelihood_values = sapply(lambda_range, function(l) L_func(c(0.01, l)))
plot(lambda_range, log_likelihood_values, type = "l", main = "Log-Likelihood vs Lambda",
lambda_range = seq(lammin, lammax, length.out = 100)
log_likelihood_values = sapply(lambda_range, function(l) L_func(c(0.01, l)))
plot(lambda_range, log_likelihood_values, type = "l", main = "Log-Likelihood vs Lambda",
xlab = "Lambda", ylab = "Negative Log-Likelihood")
lambda_range = seq(lammin, lammax, length.out = 100)
log_likelihood_values = sapply(lambda_range, function(l) L_func(c(0.01, l)))
plot(lambda_range, log_likelihood_values, type = "l", main = "Log-Likelihood vs Lambda",
xlab = "Lambda", ylab = "Negative Log-Likelihood")
lambda_range = seq(lammin, lammax, length.out = 100)
log_likelihood_values = sapply(lambda_range, function(l) L_func(c(0.01, l)))
plot(lambda_range, log_likelihood_values, type = "l", main = "Log-Likelihood vs Lambda",
xlab = "Lambda", ylab = "Negative Log-Likelihood")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/GitHub/PopulationData/newcodeDebug.R")
lambda_range = seq(lammin, lammax, length.out = 10)  # Ridurre per debug
log_likelihood_values = sapply(lambda_range, function(l) {
value = L_func(c(0.01, l))
print(paste("Lambda:", l, "Loss:", value))  # Debug
return(value)
})
valid_idx = which(is.finite(log_likelihood_values))  # Indici validi
if (length(valid_idx) > 0) {
plot(lambda_range[valid_idx], log_likelihood_values[valid_idx], type = "l",
main = "Log-Likelihood vs Lambda", xlab = "Lambda", ylab = "Negative Log-Likelihood")
} else {
print("‚ö†Ô∏è Nessun valore finito trovato per la Loss. Controllare L_func()!")
}
valid_idx = which(is.finite(log_likelihood_values))  # Indici validi
if (length(valid_idx) > 0) {
plot(lambda_range[valid_idx], log_likelihood_values[valid_idx], type = "l",
main = "Log-Likelihood vs Lambda", xlab = "Lambda", ylab = "Negative Log-Likelihood")
} else {
print("‚ö†Ô∏è Nessun valore finito trovato per la Loss. Controllare L_func()!")
}
source("~/GitHub/PopulationData/newcodeDebug.R")
source("~/GitHub/PopulationData/newcodeDebug.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_r
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/.active-rstudio-document")
best_idx
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_r
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
estimated_parameters
final_r
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
final_r
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
exp_densities
final_r
final_x_max
final_n
final_mqd
final_norm_const
vec_estimated_r
vec_estimated_l
lambda
source("~/GitHub/PopulationData/newcodejustlam.R")
vec_estimated_l
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
vec_estimated_l
vec_estimated_l
source("~/GitHub/PopulationData/newcodejustlam.R")
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(-2.0495253909))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(( final_l),final_x_max,final_mqd), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(-2.0495253909))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(paste("Œª:", final_l), paste("x_max:", final_x_max)), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
#equazione power law bend
curve((x^(-2.7568283332))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(-2.7568283332))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(paste("Œª:", final_l), paste("x_max:", final_x_max)), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(final_l))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(paste("Œª:", final_l), paste("x_max:", final_x_max)), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
final_l
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(-(-2.7568283332)))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(paste("Œª:", final_l), paste("x_max:", final_x_max)), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
vec_estimated_r
vec_estimated_l
## fit and log-bin pdf
plot(histo_data$mids, ((histo_data$counts/norm_vec)/sum(histo_data$counts/norm_vec)), main=c(station, diet), log = "xy", xlab = "log(abundance)", ylab = "log(density)")
if (is.finite(final_x_max) & is.finite(final_l)){
#equazione power law bend
curve((x^(final_l))*exp((-final_r*x))/final_norm_const, from=abund_min, to=final_x_max, add=TRUE)
abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???abline(v=final_x_max, col=4) # dove printa x_max  ## che cos'e final norm_const???
legend("topright", legend=c(paste("Œª:", final_l), paste("x_max:", final_x_max), paste("final_mqd:", final_mqd)), bty="o")
} # il primo √® lambda, il secondo √® xmax e il terzo √® la distanza quadratica media
if (is.nan(final_x_max) & is.nan(final_l)){
legend("topleft", legend="NO FIT", bty="n", cex=3)
}
final_x_max
final_l
vec_estimated_l[i]
source("~/GitHub/PopulationData/newcodejustlam.R")
is.finite(final_l)
final_l
vec_estimated_l[i]
is.finite(vec_estimated_l[i])
length(vec_mqd)
vec_estimated_l
final_x_max
vec_x_max[i]
final_r = NaN
final_l = NaN
final_x_max = NaN
final_n = NaN
final_mqd = NaN
final_norm_const = NaN
for (i in 1 : length(vec_mqd)) {
if (is.finite(vec_mqd[i]) & vec_mqd[i] <= mqd_treshold) { # controlla che la distanza quadratica media sia finita e minore di un treshold
final_x_max = vec_x_max[i]
final_r = vec_estimated_r[i]
final_l = vec_estimated_l[i]
final_n = vec_n[i]
final_mqd = vec_mqd[i]
final_norm_const = vec_norm_const[i]
}
}
final_l
vec_estimated_l[i]
final_l = vec_estimated_l[1]
final_l
final_l = vec_estimated_l[6]
final_l
vec_mqd[i]
vec_mqd[i]
mqd_treshold
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_l
vec_mqd[i]
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
final_r
final_l
vec_estimated_r[i]
vec_estimated_l[i]
mqd_treshold
is.finite(final_x_max)
is.finite(final_l)
final_l
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
N_func = function(param_rlk){
out = sum((1:x_max)^(-param_rlk[2]) * exp(-param_rlk[1] * (1:x_max)))
if (out <= 1e-10) {
print("‚ö†Ô∏è N_func troppo piccolo, evitando log(0)")
out = 1e-10
}
return(out)
}
N_func
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/GitHub/PopulationData/newcodejustlam.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
